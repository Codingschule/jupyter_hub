
services:
  
  # --- build image single-user and exit ---
  singleuser-image:
    image: my-datascience-singleuser:5.1.0
    build:
      context: .
      dockerfile: Dockerfile.singleuser
    command: ["/bin/true"]
    restart: "no"
    pull_policy: build   # avoid warning of "pull access denied"

  jupyterhub:
    build:
      context: .
      dockerfile: Dockerfile  #dockerfile for JupyterHub
      args:
        JUPYTERHUB_VERSION: "${JUPYTERHUB_VERSION:-5.1.0}" 
    restart: unless-stopped
    ports:
      - "${JUPYTERHUB_PORT:-8111}:8000"  # Map host port (env-driven) to containerâ€™s Hub port
    env_file:
      - .env  # Centralize configuration in .env
    environment:
      - DOCKER_JUPYTER_IMAGE=${DOCKER_JUPYTER_IMAGE}
      - JUPYTERHUB_NETWORK=${JUPYTERHUB_NETWORK}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JUPYTERHUB_OPEN_SIGNUP=${JUPYTERHUB_OPEN_SIGNUP}
      - JUPYTERHUB_AUTO_APPROVE=${JUPYTERHUB_AUTO_APPROVE}
      - JUPYTERHUB_ADMIN_USERS=${JUPYTERHUB_ADMIN_USERS}
      - JUPYTERHUB_SUBADMIN_USERS=${JUPYTERHUB_SUBADMIN_USERS}
      - PYTHONPATH=/srv/jupyterhub
      - EDIT_LOGIN_PASSWORD=${EDIT_LOGIN_PASSWORD}
      - EDIT_TARGET_URL=${EDIT_TARGET_URL}      
    volumes:
      - ./jupyterhub_config:/srv/jupyterhub   # Mount configs and custom Python scripts
      - /var/run/docker.sock:/var/run/docker.sock  # DockerSpawner needs access to host Docker
      - jhub-secret:/srv/jupyterhub/secret
      - ./static_edit:/usr/local/share/jupyterhub/static/edit:rw   # Mount custom editor assets 
    networks:
      - hub-public
      - hub-backend   # Internal-only network; isolates DB and Hub
    healthcheck:  # Fail container if Hub is unhealthy
      test: ["CMD-SHELL", "python3 -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/hub/health').getcode()==200 else 1)\""]      
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      singleuser-image:
        condition: service_completed_successfully  # wait to build singleuser image
      postgres:
          condition: service_healthy  # Wait for DB health before starting Hub
    command: >
      bash -lc "/usr/local/bin/gen-edit-config.sh
      && jupyterhub -f /srv/jupyterhub/jupyterhub_config.py"    
  postgres:
    image: postgres:13
    container_name: jupyterhub-postgres
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hub-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10    # Ensures DB is really up before Hub starts

networks:
  hub-public: 
    name: hub-public
  hub-backend:
    name: hub-backend
    internal: true
volumes:
  postgres-data:
  jhub-secret: