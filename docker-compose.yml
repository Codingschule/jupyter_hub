services:
  
  # --- build image single-user and exit ---
  singleuser-image:
    image: my-datascience-singleuser:5.1.0
    build:
      context: .
      dockerfile: Dockerfile.singleuser
    environment:
      - NB_USER=${NB_USER}
      - NB_UID=${NB_UID}
      - NB_GID=${NB_GID}
    command: ["/bin/true"]
    restart: "no"
    pull_policy: build   # avoid warning of "pull access denied"


  jupyterhub:
    build:
      context: .
      dockerfile: Dockerfile  #dockerfile for JupyterHub
      args:
        JUPYTERHUB_VERSION: "${JUPYTERHUB_VERSION:-5.1.0}" 
    restart: unless-stopped
    ports:
      - "${JUPYTERHUB_PORT}:8000"  # Map host port (env-driven) to containerâ€™s Hub port
    env_file:
      - .env  # Centralize configuration in .env
    environment:
      - DOCKER_JUPYTER_IMAGE=${DOCKER_JUPYTER_IMAGE}
      - JUPYTERHUB_NETWORK=${JUPYTERHUB_NETWORK}
      - POSTGRES_DB=${POSTGRES_DB}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JUPYTERHUB_OPEN_SIGNUP=${JUPYTERHUB_OPEN_SIGNUP}
      - JUPYTERHUB_ADMIN_USERS=${JUPYTERHUB_ADMIN_USERS}
      - JUPYTERHUB_SUBADMIN_USERS=${JUPYTERHUB_SUBADMIN_USERS}
      - JUPYTERHUB_SIGNUP_BOOTSTRAP_FLAG=${JUPYTERHUB_SIGNUP_BOOTSTRAP_FLAG}

      - PYTHONPATH=${PYTHONPATH}
      - EDIT_LOGIN_PASSWORD=${EDIT_LOGIN_PASSWORD}
      - EDIT_TARGET_URL=${EDIT_TARGET_URL}
      - USERS_FILE=${USERS_FILE}
      - USERSYNC_INTERVAL=${USERSYNC_INTERVAL}
      - USERSYNC_PRUNE=${USERSYNC_PRUNE}

      - COURSE_DIR=${COURSE_DIR}
      - NBGITPULLER_REPO=${NBGITPULLER_REPO}
      - NBGITPULLER_BRANCH=${NBGITPULLER_BRANCH}
      - NBGITPULLER_TARGET=${NBGITPULLER_TARGET}
      - RUNNER_ENABLED=${RUNNER_ENABLED}
      - RUNNER_WATCH_DIR=${RUNNER_WATCH_DIR}
      - RUNNER_CONFIG=${RUNNER_CONFIG}
      - RUNNER_OUTDIR=${RUNNER_OUTDIR}
      - DATASETS_DIR=${DATASETS_DIR}
      - DATASETS_VOLUME=${DATASETS_VOLUME}
      - DATASETS_MOUNT_PATH=${DATASETS_MOUNT_PATH}      
    volumes:
      - ./jupyterhub_config:/srv/jupyterhub  # Mount configs and custom Python scripts
      - /var/run/docker.sock:/var/run/docker.sock  # DockerSpawner needs access to host Docker
      - jhub-secret:/srv/jupyterhub/secret
      - ./static_edit:/usr/local/share/jupyterhub/static/edit:rw   # Mount custom editor assets 
      - datasets-vol:/shared/data:ro
    networks:
      - hub-public
      - hub-backend   # Internal-only network; isolates DB and Hub
    healthcheck:  # Fail container if Hub is unhealthy
      test: ["CMD-SHELL", "python3 -c \"import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/hub/health').getcode()==200 else 1)\""]      
      interval: 30s
      timeout: 5s
      retries: 5
    depends_on:
      singleuser-image:
        condition: service_completed_successfully  # wait to build singleuser image
      postgres:
          condition: service_healthy  # Wait for DB health before starting Hub
      datasets-init:
        condition: service_completed_successfully  # ensure datasets volume is initialized
    command: >
      bash -lc "/usr/local/bin/gen-edit-config.sh
      && jupyterhub -f /srv/jupyterhub/jupyterhub_config.py"    
  postgres:
    image: postgres:16
    container_name: jupyterhub-postgres
    restart: unless-stopped
    expose:
      - "5432"
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - hub-backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\" -h localhost"]
      interval: 5s
      timeout: 5s
      retries: 10    # Ensures DB is really up before Hub starts

  datasets-init:
    image: alpine:3.20 #minimal image
    volumes:
      - ./datasets_seed:/seed:ro 
      - datasets-vol:/data

    command: >
      /bin/sh -c 'set -eu;
      mkdir -p /data;
      if [ -d /seed ] && [ "$(ls -A /seed 2>/dev/null || true)" ]; then
        tar -C /seed -cf - . | tar -C /data -xpf -;
        echo "Seed copied to /data";
      else
        echo "No files in /seed; nothing to copy";
      fi;
      exit 0'
    restart: "no" # stop container     

networks:
  hub-public: 
    name: ${JUPYTERHUB_EXT_NETWORK}
    driver: bridge
  hub-backend:
    name: ${JUPYTERHUB_NETWORK}
    driver: bridge
    attachable: true
volumes:
  postgres-data:
  jhub-secret:
  datasets-vol:
    name: jupyter_hub_test_datasets-vol